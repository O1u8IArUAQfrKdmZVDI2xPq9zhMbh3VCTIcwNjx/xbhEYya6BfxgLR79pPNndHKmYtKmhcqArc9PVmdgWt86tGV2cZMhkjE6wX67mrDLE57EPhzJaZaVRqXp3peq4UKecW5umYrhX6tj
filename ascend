--// Check Game Loaded
repeat task.wait() until game:IsLoaded()

--// Check Loaded
if getgenv().Loaded or getgenv().ENCRYPT_LIB_LOADED then warn("[⚠️] Ascend is already loaded!") return end
getgenv().Loaded = not getgenv().Loaded

--// Whitelist System
_G.script_key = getgenv().Script_Key or getgenv().Ascend.Script_Key
local EncryptWhitelist = loadstring(game:HttpGet('https://raw.githubusercontent.com/dooms-scripts/projects/main/encrypt-whitelist-module'))()

if not EncryptWhitelist.plr_is_whitelisted() then
	return game.Players.LocalPlayer:Kick("DM @astonlix on Discord for whitelist")
end

--// Game Detection
if game.PlaceId == 3634139746 then
    print('[🔃] Ascend: Hood Customs Detected')
    loadstring(game:HttpGet('https://raw.githubusercontent.com/Astonlix/LuaU/Main/hc-bypass.lua'))()
end

--// Adonis Bypass
loadstring(game:HttpGet('https://raw.githubusercontent.com/Astonlix/LuaU/Main/adonis-bypass.lua'))()

--// Script
local Target, Locked, AutoPredictionToggled, SilentRange, CamlockRange, NotificationsToggled, ResolverToggled, KillbotToggled = nil,false, getgenv().Ascend.Camlock.Main.Prediction.Auto, getgenv().Ascend.Silent.Main.Range, getgenv().Ascend.Camlock.Main.Range, getgenv().Ascend.Notifications.Enabled, getgenv().Ascend.Resolver.Enabled, false
local Players, RunService, UserInputService, LocalPlayer, Character, Camera = game:GetService("Players"), game:GetService("RunService"), game:GetService("UserInputService"), game.Players.LocalPlayer, game.Players.LocalPlayer.Character, game.Workspace.CurrentCamera
local EasingStyles = {
    'Linear',
    'Sine',
    'Back',
    'Quad',
    'Quart',
    'Bounce',
    'Elastic',
    'Exponential',
    'Circular',
    'Cubic',
}
local EasingDirection = {
    'In',
    'Out',
    'InOut'
}

RunService.Heartbeat:Connect(function()
    if getgenv().Ascend.Camlock.Main.Enabled then
        if Target ~= nil then
            local HorizontalPrediction = Vector3.new(Target.AssemblyLinearVelocity.X, 0, Target.AssemblyLinearVelocity.Z) * getgenv().Ascend.Camlock.Main.Prediction.Horizontal
            local VerticalPrediction = Vector3.new(0, Target.AssemblyLinearVelocity.Y, 0) * getgenv().Ascend.Camlock.Main.Prediction.Vertical
            local TargetPos = Target.Position + HorizontalPrediction + VerticalPrediction
            local LockOn = CFrame.lookAt(Camera.CFrame.Position, TargetPos)
            if getgenv().Ascend.Resolver.Enabled and getgenv().Ascend.Resolver.Type == 'MoveDirection' then 
                Camera.CFrame = CFrame.lookat(Camera.CFrame.Position, Target.Parent.Humanoid * 19.64285714289 * getgenv().Ascend.Camlock.Main.Prediction.Horizontal)
            elseif getgenv().Ascend.Resolver.Enabled and getgenv().Ascend.Resolver.Type == 'Ignore Velocity (Y)' then
                local HorizontalPrediction = Vector3.new(Target.AssemblyLinearVelocity.X, 0, Target.AssemblyLinearVelocity.Z) * getgenv().Ascend.Camlock.Main.Prediction.Horizontal
                local VerticalPrediction = Vector3.new(0, 0, 0) * getgenv().Ascend.Camlock.Main.Prediction.Vertical
                local TargetPos = Target.Position + HorizontalPrediction + VerticalPrediction
                Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, TargetPos)
            end

            if getgenv().Ascend.Smoothing.Enabled then
                if getgenv().Ascend.Shake.Enabled then
                    local Shake = LockOn + Vector3.new(math.random(-getgenv().Ascend.Shake.Power, getgenv().Ascend.Shake.Power), math.random(-getgenv().Ascend.Shake.Power, getgenv().Ascend.Shake.Power), math.random(-getgenv().Ascend.Shake.Power, getgenv().Ascend.Shake.Power) * 0.1)
                    Camera.CFrame = Camera.CFrame:Lerp(Shake, getgenv().Ascend.Smoothing.Power, Enum.EasingStyle[getgenv().Ascend.Smoothing.Style], Enum.EasingDirection[getgenv().Ascend.Smoothing.Direction])
                else
                    Camera.CFrame = Camera.CFrame:Lerp(LockOn, getgenv().Ascend.Smoothing.Power, Enum.EasingStyle[getgenv().Ascend.Smoothing.Style], Enum.EasingDirection[getgenv().Ascend.Smoothing.Direction])
                end
            elseif getgenv().Ascend.Shake.Enabled then
                local Shake = LockOn + Vector3.new(math.random(-getgenv().Ascend.Shake.Power, getgenv().Ascend.Shake.Power), math.random(-getgenv().Ascend.Shake.Power, getgenv().Ascend.Shake.Power), math.random(-getgenv().Ascend.Shake.Power, getgenv().Ascend.Shake.Power))
                Camera.CFrame = Camera.CFrame:Lerp(Shake)
            else
                Camera.CFrame = LockOn
            end
        end
        end
    end
)

--// Metatable
local MT = getrawmetatable(game)
local Old_NC = MT.__namecall
setreadonly(MT, false)

MT.__namecall = newcclosure(function(...)
    local Args = {...}
    local Method = getnamecallmethod()
    if getgenv().Ascend.Silent.Main.Enabled or getgenv().Ascend.Killbot.Enabled and Method == "FireServer" and Args[2] == "UpdateMousePos" then
        if Target ~= nil then
            local HorizontalPrediction = Vector3.new(Target.AssemblyLinearVelocity.X, 0, Target.AssemblyLinearVelocity.Z) * getgenv().Ascend.Silent.Main.Prediction.Horizontal
            local VerticalPrediction = Vector3.new(0, Target.AssemblyLinearVelocity.Y, 0) * getgenv().Ascend.Silent.Main.Prediction.Vertical
            local TargetPos = Target.Position + HorizontalPrediction + VerticalPrediction

            Args[3] = TargetPos
            return Old_NC(unpack(Args))
        end
    end
    return Old_NC(...)
end)

--// Encrypt
local EncryptRepo = 'https://raw.githubusercontent.com/dooms-scripts/ui-libraries/main/encrypt/'
local EncryptLibrary, EncryptNotification, EncryptESP = loadstring(game:HttpGet(EncryptRepo .. 'encrypt.lua'))(), loadstring(game:HttpGet(EncryptRepo .. 'encrypt-notifications.lua'))(), loadstring(game:HttpGet(EncryptRepo .. 'encrypt-esp.lua'))()

--// Get Distance from LocalPlayer to Object
local function Get_Distance(Object, Method)
    local Position, IsVisibleOnViewport = Camera:WorldToScreenPoint(Object.Position)
    if IsVisibleOnViewport then
        if Method == "Center" then
            local Distance = (Character.PrimaryPart.Position - Object.Position).Magnitude
            return Distance
        elseif Method == "Mouse" then
            local Mouse = LocalPlayer:GetMouse()
            local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Object.Position)).Magnitude
            return Distance
        end
    end
    return math.huge
end

--// Finds nearest enemy
local function FindNearestEnemy()
    local ClosestDistance, ClosestPlayer = math.huge, nil
    local Mouse = LocalPlayer:GetMouse()
    local CenterPosition =
        Vector2.new(
        game:GetService("GuiService"):GetScreenResolution().X / 2,
        game:GetService("GuiService"):GetScreenResolution().Y / 2
    )
    CamlockRange = getgenv().Ascend.Camlock.Main.Range
    SilentRange = getgenv().Ascend.Silent.Main.Range
    for _, Player in ipairs(game:GetService("Players"):GetPlayers()) do
        if Player ~= LocalPlayer then
            local Character = Player.Character
            if Character and Character:FindFirstChild("Humanoid") and Character:FindFirstChild("HumanoidRootPart") and Character.Humanoid.Health > 0 then
                local Position, IsVisibleOnViewport = Camera:WorldToViewportPoint(Character.PrimaryPart.Position)
                if IsVisibleOnViewport then
                    if getgenv().Ascend.Camlock.Main.Enabled then
                        local Distance = Get_Distance(Character.PrimaryPart, 'Center')
                        if Distance < CamlockRange then
                            local Distance = (CenterPosition - Vector2.new(Position.X, Position.Y)).Magnitude
                            if Distance < ClosestDistance then
                                ClosestPlayer = Character[getgenv().Ascend.Camlock.Main.HitPart]
                                ClosestDistance = Distance
                            end
                        end
                    elseif getgenv().Ascend.Silent.Main.Enabled then
                        local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Position.X, Position.Y)).Magnitude
                        if Distance < SilentRange then
                            if Distance < ClosestDistance then
                                ClosestPlayer = Character[getgenv().Ascend.Silent.Main.HitPart]
                                ClosestDistance = Distance
                            end
                        end
                    else
                        print("NONE")
                        return nil
                    end
                end
            end
        end
    end

    return ClosestPlayer
end

if UserInputService.TouchEnabled then
    local MenuButton = {}

    function MenuButton.new(instance, properties)
        local i = Instance.new(instance)
        for p,v in pairs(properties) do
            local Sucess, Error = pcall(function()
                i[p] = v
            end)

            if Error then 
                warn('[!] PROBLEM CREATING INSTANCE "'..instance..'": '..Error) 
            end
        end

        return i
    end


    ScreenGui = MenuButton.new("ScreenGui", {
        Parent = game:GetService("CoreGui") or gethui();
        IgnoreGuiInset = true;
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
    })

    Frame = MenuButton.new("Frame", {
        Parent = ScreenGui;
        BorderSizePixel = 0;
        Size = UDim2.new(0, 50, 0, 50);
        BorderColor3 = Color3.fromRGB(0, 0, 0);
        Position = UDim2.new(0.1, 0, 0.11, 0);
        BackgroundTransparency = 0.8;
        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
    })

    ImageButton = MenuButton.new("ImageButton", {
        Parent = Frame;
        BackgroundTransparency = 1;
        AnchorPoint = Vector2.new(0.5, 0.5);
        Image = [[http://www.roblox.com/asset/?id=16976953335]];
        BorderSizePixel = 0;
        Size = UDim2.new(0, 50, 0, 50);
        BorderColor3 = Color3.fromRGB(0, 0, 0);
        Position = UDim2.new(0.5, 0, 0.5, 0);
        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
    })
    local LockButton = {}

    function LockButton.new(instance, properties)
        local i = Instance.new(instance)
        for p,v in pairs(properties) do
            local Success, Error = pcall(function()
               i[p] = v
            end)

            if Error then 
                warn('[!] PROBLEM CREATING INSTANCE "'..instance..'": '..Error) 
            end
        end

        return i
    end

    ScreenGui = LockButton.new("ScreenGui", {
        Parent = game:GetService("CoreGui") or gethui();
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
    })

    Frame = LockButton.new("Frame", {
        Parent = ScreenGui;
        AnchorPoint = Vector2.new(0.5, 0.5);
        BorderSizePixel = 0;
        Size = UDim2.new(0.200000003, 0, 0.340000004, 0);
        ClipsDescendants = true;
        BorderColor3 = Color3.fromRGB(0, 0, 0);
        Position = UDim2.new(0.194331989, 0, 0.151629075, 0);
        BackgroundTransparency = 0.699999988079071;
        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
    })

    ImageButton = LockButton.new("ImageButton", {
        Parent = Frame;
        BackgroundTransparency = 1;
        Image = [[https://www.roblox.com/asset/?id=16976953335]];
        BorderSizePixel = 0;
        Size = UDim2.new(1.00000024, 0, 1, 0);
        BorderColor3 = Color3.fromRGB(0, 0, 0);
        Position = UDim2.new(-0.00599975605, 0, 0.00200004573, 0);
        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
    })
    ImageButton.Activated:Connect(function()
        Locked = not Locked
        if Locked then
            Target = FindNearestEnemy()
       elseif not Locked then
           Target = nil
        end
    end)
end

--// Encrypt Settings
EncryptLibrary.colors = {
    main_color = Color3.fromRGB(0, 204, 204),
    foreground = Color3.fromRGB(23, 23, 23), 
    background = Color3.fromRGB(10, 10, 10), 
    categories = Color3.fromRGB(10, 10, 10), 
    topbar = Color3.fromRGB(10, 10, 10), 
}
EncryptLibrary.fonts = {
	main = 'Gotham',
	secondary = 'GothamBold',
}
EncryptLibrary.drop_shadow = true
EncryptNotification.padding = 75

--// Initilize EncryptNotification
EncryptNotification.initialize()

local Watermark = EncryptLibrary.watermark({text = "Made by @vurelix", size = UDim2.new(0, 170, 0, 20)}) 
local FrameTimer, FrameCounter, FPS = tick(), 0, 240
--// Update watermark before every frame
local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    local Ping = math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())

    FrameCounter += 1
    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end
    Watermark:update({text = string.format(' Ascend | %s FPS | %s Ping', FPS, Ping)})
end)

--// Window
local Window = EncryptLibrary.new_window({ 
    title_text = '<b><font color="rgb(0, 204, 204)">Ascend</font> | Private Build</b>', 
    size = UDim2.new(0, 380, 0, 425) 
})

--// Tabs
local Tabs = {
    Home = Window.new_tab('Home'),
    Legit = Window.new_tab('Legit'),
    Rage = Window.new_tab('Rage'),
    ESP = Window.new_tab('ESP'),
    Settings = Window.new_tab('Settings'),
}

--// Groups
local Groups = {
    HomeGroup1 = Tabs.Home.new_group(),
    HomeGroup2 = Tabs.Home.new_group(),
    LegitGroup1 = Tabs.Legit.new_group(),
    LegitGroup2 = Tabs.Legit.new_group(),
    RageGroup1 = Tabs.Rage.new_group(),
    RageGroup2 = Tabs.Rage.new_group(),
    ESPGroup1 = Tabs.ESP.new_group(),
    ESPGroup2 = Tabs.ESP.new_group(),
    SettingsGroup1 = Tabs.Settings.new_group(),
    SettingsGroup2 = Tabs.Settings.new_group(),
}

--// Categories
local Categories = {
    HomeCategory1 = Groups.HomeGroup1.new_category('Information'),
    HomeCategory2 = Groups.HomeGroup2.new_category('Credits'),
    LegitCategory1 = Groups.LegitGroup1.new_category('Main'),
    LegitCategory2 = Groups.LegitGroup2.new_category('Other'),
    RageCategory1 = Groups.RageGroup1.new_category('Target'),
    RageCategory2 = Groups.RageGroup2.new_category('Other'),
    ESPCategory1 = Groups.ESPGroup1.new_category('Renders'),
    ESPCategory2 = Groups.ESPGroup2.new_category('Color'),
    SettingsCategory1 = Groups.SettingsGroup1.new_category('Menu'),
    SettingsCategory2 = Groups.SettingsGroup2.new_category('Theme'),
}

--// Display User Information
local UserInformation = {
    Username = Categories.HomeCategory1.new_label({text = string.format('<b>Username:</b> %s', LocalPlayer.Name)}).alignment('center'),
    UserId = Categories.HomeCategory1.new_label({text = string.format('<b>UserId:</b> %s', LocalPlayer.UserId)}).alignment('center'),
    WhitelistStatus = Categories.HomeCategory1.new_label({text = string.format("<b>Whitelist Status:</b> %s", tostring(EncryptWhitelist.plr_is_whitelisted()))}).alignment('center'),
}

--// Display Credits
local Credits = {
    Developer = Categories.HomeCategory2.new_label({text = string.format('<b>Developer:</b> vurelix')}).alignment('center'),
}
--// Camlock Section
Categories.LegitCategory1.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Camlock</font></b>'
}).alignment('center')

local Camlock = Categories.LegitCategory1.new_toggle({
    text = 'Camlock', 
    callback = function(Toggle)
        getgenv().Ascend.Camlock.Main.Enabled = not getgenv().Ascend.Camlock.Main.Enabled
    end
})

Camlock:update_value(getgenv().Ascend.Camlock.Main.Enabled)

local CamlockKeybind = Categories.LegitCategory1.new_keybind({
    text = 'Keybind', 
    keybind = getgenv().Ascend.Camlock.Main.Keybind,
    callback = function() 
        if getgenv().Ascend.Camlock.Main.Enabled then
            Locked = not Locked
            if Locked then
                Target = FindNearestEnemy()
            elseif not Locked then
                Target = nil
            end
        end
    end
})

local CamlockHitPart = Categories.LegitCategory1.new_dropdown({
    text = 'HitPart',
    default_selection = 'HumanoidRootPart', 
    callback = function(Selection)
        getgenv().Ascend.Camlock.Main.HitPart = Selection
    end
})
local Success, Error = pcall(function()
    for _, v in ipairs(Character:GetChildren()) do
        if v:IsA("BasePart") then
            CamlockHitPart:add_option(tostring(v))
        end
    end
end)
if not Success and Error then warn(Error) end

local CamlockRange = Categories.LegitCategory1.new_slider({
    text = 'Range', 
    default_value = getgenv().Ascend.Camlock.Main.Range, -- optional
    min_value = 0, 
    max_value = 999, 
    allow_decimals = true, 
    callback = function(Value)
        getgenv().Ascend.Camlock.Main.Range = Value
    end
})

-- // Silent Aim Section
Categories.LegitCategory1.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Silent Aim</font></b>'
}).alignment('center')

local Silent = Categories.LegitCategory1.new_toggle({
    text = 'Silent Aim', 
    callback = function()
        getgenv().Ascend.Silent.Main.Enabled = not getgenv().Ascend.Silent.Main.Enabled
    end
})

local SilentKeybind = Categories.LegitCategory1.new_keybind({
    text = 'Keybind', 
    keybind = getgenv().Ascend.Silent.Main.Keybind,
    callback = function() 
        if getgenv().Ascend.Silent.Main.Enabled then
            Locked = not Locked
            if Locked then
                Target = FindNearestEnemy()
            elseif not Locked then
                Target = nil
            end
        end
    end
})

local SilentHitPart = Categories.LegitCategory1.new_dropdown({
    text = 'HitPart',
    default_selection = 'HumanoidRootPart', 
    callback = function(Selection)
        getgenv().Ascend.Silent.Main.HitPart = Selection
    end
})

if not Success and Error then warn(Error) end

local SilentRange = Categories.LegitCategory1.new_slider({
    text = 'Range', 
    default_value = getgenv().Ascend.Silent.Main.Range,
    min_value = 0, 
    max_value = 999, 
    allow_decimals = true, 
    callback = function(Value)
        getgenv().Ascend.Silent.Main.Range = Value
    end
})

local Success, Error = pcall(function()
    for _, v in ipairs(Character:GetChildren()) do
        if v:IsA("BasePart") then
            SilentHitPart:add_option(tostring(v))
        end
    end
end)

if not Success and Error then warn(Error) end

-- // Prediction Section
Categories.LegitCategory1.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Prediction Settings</font></b>'
}).alignment('center')

local PredictMovement = Categories.LegitCategory1.new_toggle({
    text = 'Predict Movement', 
    callback = function(Value)
        getgenv().Ascend.Silent.Main.Prediction.Enabled = Value
        getgenv().Ascend.Camlock.Main.Prediction.Enabled = Value
    end
})

PredictMovement:update_value(getgenv().Ascend.Silent.Main.Prediction.Enabled)

local AutoPrediction = Categories.LegitCategory1.new_toggle({
    text = 'Ping Based', 
    callback = function(Value)
        while Value do task.wait()
            local Ping = math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
            if Ping > 10 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P10_20'], getgenv().Ascend.AutoPrediction['P10_20']
            elseif Ping > 20 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P20_30'], getgenv().Ascend.AutoPrediction['P20_30']
            elseif Ping > 30 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P30_40'], getgenv().Ascend.AutoPrediction['P30_40']
            elseif Ping > 40 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P40_50'], getgenv().Ascend.AutoPrediction['P40_50']
            elseif Ping > 50 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P50_60'], getgenv().Ascend.AutoPrediction['P50_60']
            elseif Ping > 60 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P60_70'], getgenv().Ascend.AutoPrediction['P60_70']
            elseif Ping > 70 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P70_80'], getgenv().Ascend.AutoPrediction['P70_80']
            elseif Ping > 80 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P80_90'], getgenv().Ascend.AutoPrediction['P80_90']
            elseif Ping > 90 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P90_100'], getgenv().Ascend.AutoPrediction['P90_100']
            elseif Ping > 100 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P110_120'], getgenv().Ascend.AutoPrediction['P110_120']
            elseif Ping > 120 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P120_130'], getgenv().Ascend.AutoPrediction['P120_130']
            elseif Ping > 130 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P130_140'], getgenv().Ascend.AutoPrediction['P130_140']
            elseif Ping > 140 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P140_150'], getgenv().Ascend.AutoPrediction['P140_150']
            elseif Ping > 150 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P150_160'], getgenv().Ascend.AutoPrediction['P150_160']
            elseif Ping > 160 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P160_170'], getgenv().Ascend.AutoPrediction['P160_170']
            elseif Ping > 170 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P170_180'], getgenv().Ascend.AutoPrediction['P170_180']
            elseif Ping > 180 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P180_190'], getgenv().Ascend.AutoPrediction['P180_190']
            elseif Ping > 190 then
                getgenv().Ascend.Silent.Main.Prediction.HorizontalPrediction, getgenv().Ascend.Silent.Main.Prediction.VerticalPrediction = getgenv().Ascend.AutoPrediction['P190_200'], getgenv().Ascend.AutoPrediction['P190_200']
            end
        end
    end
})

local HorizontalPrediction = Categories.LegitCategory1.new_textbox({
    text = 'Horizontal', 
    placeholder_text = '?',
    callback = function(Value)
        getgenv().Ascend.Camlock.Main.Prediction.Horizontal = Value
    end
})

HorizontalPrediction:update(getgenv().Ascend.Camlock.Main.Prediction.Horizontal)

local VerticalPrediction = Categories.LegitCategory1.new_textbox({
    text = 'Vertical', 
    placeholder_text = '?',
    callback = function(Value)
        getgenv().Ascend.Camlock.Main.Prediction.Horizontal = Value
    end
})

VerticalPrediction:update(getgenv().Ascend.Camlock.Main.Prediction.Vertical)

AutoPredictionToggled = getgenv().Ascend.Camlock.Main.Prediction.Auto


AutoPrediction:update_value(getgenv().Ascend.Silent.Main.Prediction.Auto)
print(AutoPrediction:get_value())
warn("[💎] Ascend loaded!")

--// Smoothness Section
Categories.LegitCategory2.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Smoothing</font></b>'
}).alignment('center')

local Smoothing = Categories.LegitCategory2.new_toggle({
    text = 'Enabled', 
    callback = function(Value)
        getgenv().Ascend.Smoothing.Enabled = Value
    end
})

Smoothing:update_value(getgenv().Ascend.Smoothing.Enabled)

local SmoothingPower = Categories.LegitCategory2.new_slider({
    text = 'Smoothing Power', 
    default_value = getgenv().Ascend.Smoothing.Power,
    min_value = 0, 
    max_value = 1, 
    allow_decimals = true, 
    callback = function(value)
        getgenv().Ascend.Smoothing.Power = math.abs(value)
    end
})

local SmoothingStyle = Categories.LegitCategory2.new_dropdown({
    text = 'Styles', 
    default_selection = getgenv().Ascend.Smoothing.Style,
    callback = function(selection)
        getgenv().Ascend.Smoothing.Style = selection:sub(4, 99)
    end
})
local Success, Error = pcall(function()
    for i, v in EasingStyles do
        SmoothingStyle:add_option(string.format('%i. %s', i, v))
    end
end)

if not Success and Error then warn(Error) end

local SmoothingDirection = Categories.LegitCategory2.new_dropdown({
    text = 'Direction', 
    default_selection = getgenv().Ascend.Smoothing.Direction,
    callback = function(selection)
        getgenv().Ascend.Smoothing.Direction = selection:sub(4, 99)
    end
})
local Success, Error = pcall(function()
    for i, v in EasingDirection do
        SmoothingDirection:add_option(string.format('%i. %s', i, v))
    end
end)

if not Success and Error then warn(Error) end

Categories.LegitCategory2.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Shake</font></b>'
}).alignment('center')

local Shake = Categories.LegitCategory2.new_toggle({
    text = 'Enabled', 
    callback = function(Value)
        getgenv().Ascend.Shake.Enabled = Value
    end
})

Shake:update_value(getgenv().Ascend.Shake.Enabled)

local ShakePower = Categories.LegitCategory2.new_slider({
    text = 'Shake Power', 
    default_value = getgenv().Ascend.Shake.Power,
    min_value = 0, 
    max_value = 10, 
    allow_decimals = true, 
    callback = function(value)
        getgenv().Ascend.Shake.Power = value
    end
})

Categories.LegitCategory2.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Notifications</font></b>'
}).alignment('center')

local Notifications = Categories.LegitCategory2.new_toggle({
    text = 'Enabled', 
    callback = function(Value)
        NotificationsToggled = Value
    end
})
Notifications:update_value(getgenv().Ascend.Notifications.Enabled)

local NotificationType = Categories.LegitCategory2.new_dropdown({
    text = 'Type', 
    default_selection = getgenv().Ascend.Notifications.Type,
    callback = function(selection)
        getgenv().Ascend.Notifications.Type = selection
    end
})
NotificationType:add_option('Encrypt')
NotificationType:add_option('Akali')
NotificationType:add_option('Roblox')

Categories.LegitCategory2.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Resolver</font></b>'
}).alignment('center')

local Resolver = Categories.LegitCategory2.new_toggle({
    text = 'Enabled', 
    callback = function(Value)
        ResolverToggled = Value
    end
})

local ResolverType = Categories.LegitCategory2.new_dropdown({
    text = 'Type', 
    default_selection = getgenv().Ascend.Resolver.Type,
    callback = function(selection)
        getgenv().Ascend.Resolver.Type = selection
    end
})

ResolverType:add_option('MoveDirection')
ResolverType:add_option('Recalculate Velocity')
ResolverType:add_option('Ignore Velocity (Y)')

Categories.RageCategory1.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Killbot</font></b>'
}).alignment('center')

local Killbot = Categories.RageCategory1.new_toggle({
    text = 'Enabled', 
    callback = function(Value)
    end
})

local KillbotKeybind = Categories.RageCategory1.new_keybind({
    text = 'Keybind', 
    keybind = nil,
    callback = function() 
        KillbotToggled = not KillbotToggled
        if KillbotToggled then
            while Killbot:get_value() do
                for x = 0, 360, (2 * math.pi) do task.wait()
                    local Orbit = game.Players.LocalPlayer.Character.HumanoidRootPart
                    Target = FindNearestEnemy()
                    
                    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(256^2)

                    local Orient = Target.CFrame * CFrame.Angles(0, math.rad(x), 0)

                    local Facing = CFrame.lookAt(Orbit.CFrame.Position, Target.CFrame.Position)

                    local NewCF = Target.CFrame + ((Orient.LookVector * getgenv().Killbot.Distance) + Vector3.new(0, getgenv().Killbot.Height, 0))

                    Orbit.CFrame = NewCF * CFrame.Angles(0, math.rad(x), 0)

                    Camera.CameraSubject = Target.Parent.Humanoid

                    RunService.RenderStepped:Wait()
                    
                    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                end
            end
        else
            Target = nil
        end
    end
})

local KillbotDistance = Categories.RageCategory1.new_textbox({
    text = 'Distance', 
    placeholder_text = getgenv().Ascend.Killbot.Distance,
    callback = function(text)
        getgenv().Ascend.Killbot.Distance = text
    end
})
KillbotDistance:update(getgenv().Ascend.Killbot.Distance)

local KillbotHeight = Categories.RageCategory1.new_textbox({
    text = 'Distance', 
    placeholder_text = getgenv().Ascend.Killbot.Height,
    callback = function(text)
        getgenv().Ascend.Killbot.Height = text
    end
})

Categories.ESPCategory1.new_label({ 
    text = '<b><font color="rgb(255, 255, 255)">Box</font></b>'
}).alignment('center')

local BoxEnabled = Categories.ESPCategory1.new_toggle({
    text = 'Enabled', 
    callback = function(Value)
        if Value then
            for _, Player in ipairs(Players:GetPlayers()) do
                getgenv().blud = EncryptESP.new_box(Players[tostring(Player)], {
                    color = Color3.fromRGB(255, 255, 255),
                    outline_color = Color3.fromRGB(0, 0, 0),
                    thickness = 1,
                    update_speed = 0,
                    outline = true,
                })
            end
        else
            cleardrawcache()
        end
    end
})

local BoxColor = Categories.ESPCategory1.new_colorpicker({
    text = 'Color', 
    default_color = Color3.fromRGB(255, 255, 255),
    callback = function(color)
        for _, Player in ipairs(Players:GetPlayers()) do
            getgenv().blud = {
                color = Color3.fromRGB(color),
                outline_color = Color3.fromRGB(color),
                thickness = 1,
                update_speed = 0,
                outline = true,
            }
        end
    end
})





